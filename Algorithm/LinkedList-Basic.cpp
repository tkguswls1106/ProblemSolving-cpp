#include <list>
#include <iostream>

using namespace std;

// [ 연결리스트 기초 정리 ]

void printL(list<int> li)
{
    //------------------------------------------------------------------//
    // < for문 사용방식 >
    for (auto n : li) // for문 순회는 이뿐만아니라 iter버전도 가능.
        cout << n << " ";
    cout << "\n";

    // for (auto iter = li.begin(); iter != li.end(); iter++)
    //     cout << *iter << " ";
    // cout << "\n";
    //------------------------------------------------------------------//
}

int main()
{
    // list 컨테이너에는 at(index), [index] 가 없다. (반복자로 증감연산자 ++,--하는 방식으로만 원소에 접근가능하다.)

    //------------------------------------------------------------------//
    // < 삽입, 삭제 >

    // 연결리스트 선언
    list<int> li = {1, 2, 3, 4, 4};
    printL(li);  // => 1 2 3 4 4

    auto iter = li.begin();  // 1을 고정하여 가리킴. 참고로 연결리스트에서는 li.begin()+1 은 사용 불가능하다. 증감연산자로 해줘야함.
    cout << "iter 실제값: " << *iter << "\n";  // => 1

    // 맨앞에 삽입
    li.push_front(10);
    printL(li);  // => 10 1 2 3 4 4

    // 맨뒤에 삽입
    li.push_back(20);
    printL(li);  // => 10 1 2 3 4 4 20

    // 1 앞에 삽입
    li.insert(iter, 30);
    printL(li);  // => 10 30 1 2 3 4 4 20

    // 1다음인 2앞에 삽입
    iter++;  // iter이 가리키는곳을 1의 다음 숫자인 2로 변경.
    cout << "iter 실제값: " << *iter << "\n";  // => 2
    li.insert(iter, 40);
    printL(li);  // => 10 30 1 40 2 3 4 4 20

    // 2이전인 40앞에 삽입
    iter--;  // iter이 가리키는곳을 2의 이전 숫자인 40으로 변경.
    cout << "iter 실제값: " << *iter << "\n";  // => 40
    li.insert(iter, 50);
    printL(li);  // => 10 30 1 50 40 2 3 4 4 20

    // 40부분인 위치의 숫자 제거
    iter = li.erase(iter);  // iter가 가리키는값인 40을 제거하고, 그 다음 원소인 2의 위치인 iter를 반환. 참고로 굳이 반환안받아도 사용가능하나, 차후 0으로 에러날수있음.
    cout << "iter 실제값: " << *iter << "\n";  // => 2
    printL(li);  // => 10 30 1 50 2 3 4 4 20

    // 원소값이 4인것들을 모두 삭제
    li.remove(4);
    printL(li);  // => 10 30 1 50 2 3 20

    //------------------------------------------------------------------//
    // < 정렬, 뒤집기 >

    // 오름차순 정렬
    li.sort();
    printL(li);  // => 1 2 3 10 20 30 50
    
    // 뒤집기
    li.reverse();
    printL(li);  // => 50 30 20 10 3 2 1

    //------------------------------------------------------------------//


    return 0;
}